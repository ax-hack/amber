;
; rowl - 1st generation
; Copyright (C) 2010 nineties
;
; $Id: vm-gc.rlc 2015-06-21 18:57:08 nineties $
;

(import "stdlib")
(import "vm-compile")

(var SYS_MUNMAP  91)
(var SYS_MMAP2   192)

; mmap options
(var PROT_READ  0x1)
(var PROT_WRITE 0x2)
(var PROT_EXEC  0x4)
(var PROT_SEM   0x8)
(var PROT_NONE  0x0)
(var MAP_SHARED    0x1)
(var MAP_PRIVATE   0x2)
(var MAP_TYPE      0xf)
(var MAP_FIXED     0x10)
(var MAP_ANONYMOUS 0x20)

(var DEFAULT_NUM_BLOCK 32) ; 32Mbyte

; block and page management
;
; |<---------------------- 1 Mbyte -------------------------->|
; | space |pd0|pd1|....|pdN-1| space |page0|page1|....|pageN-1|

; structure of page descriptor. It's size must be 2-words.
;
; 1 bit : joined flag (1 if the page is joined with previous page)
; 31 bit : generation (ID number of generation to which this page belongs)
; 32 bit : void *next (Pointer to the next page in the page queue)

(define pdescr->joined      (addr)  `(& ([] @addr 0) 1))
(define pdescr->generation  (addr)  `(>> ([] @addr 0) 1))
(define pdescr->next        (addr)  `([] @addr 1))

(define pdescr->joined=1    (addr)  `([]= @addr 0 (| ([] @addr 0) 1)))
(define pdescr->joined=0    (addr)  `([]= @addr 0 (& ([] @addr 0) @(~ 1))))
(define pdescr->generation= (addr val) `([]= @addr 0 (| (<< @val 1) (& ([] @addr 0) 1))))
(define pdescr->next=       (addr val)  `([]= @addr 1 @val))

; structure of block descriptor.
; 32 bit : void *next  (Pointer to the next block)
; 32 bit : void *first (Pointer to the beginning of the block)

(define bdescr->next    (addr)      `([] @addr 0))
(define bdescr->next=   (addr val)  `([]= @addr 0 @val))
(define bdescr->first   (addr)      `([] @addr 1))
(define bdescr->first=  (addr val)  `([]= @addr 1 @val))

(var PDESCR_SIZE    8)
(var PDESCR_SHIFT   3)  ; PDESCR_SIZE = 2^PDESCR_SHIFT
(var BDESCR_SIZE    8)
(var BDESCR_SHIFT   3)  ; BDESCR_SIZE = 2^BDESCR_SHIFT
(var BDESCR_WORD    (>> BDESCR_SIZE WORD_SHIFT))

(var BLOCK_MASK (- BLOCK_SIZE 1))

; required constraints: 2*PAGE_SHIFT <= BLOCK_SHIFT
(var PAGE_SHIFT 9)      ; 512B
(var PAGE_SIZE (<< 1 PAGE_SHIFT))
(var PAGE_WORDS_SHIFT (- PAGE_SHIFT WORD_SHIFT))
(var PAGE_WORDS       (<< 1 PAGE_WORDS_SHIFT))
(var PAGE_MASK (- PAGE_SIZE 1))

(var GENERATION_SHIFT 31)
(var GENERATION_MASK (- (<< 1 GENERATION_SHIFT) 1))
(define ADVANCE_GENERATION (old) `(& (+ @old 1) @GENERATION_MASK))

(var PAGES_PER_BLOCK (>> (* (- PAGE_SIZE PDESCR_SIZE) BLOCK_SIZE) (* 2 PAGE_SHIFT)))

; object address to page index
(define ADDR2BLOCK (addr) `(& @addr @(~ BLOCK_MASK)))
(define ADDR2PAGE   (obj)  `(& @obj @(~ PAGE_MASK)))
(define ADDR2PDESCR (obj)
    `(| @(ADDR2BLOCK obj)
        (>> (& @obj @(& BLOCK_MASK (~ PAGE_MASK))) @(- PAGE_SHIFT PDESCR_SHIFT))
        ))
(define PDESCR2PAGE (pd)
    `(| @(ADDR2BLOCK pd)
        (<< (& @pd @BLOCK_MASK) @(- PAGE_SHIFT PDESCR_SHIFT))
        ))

(var FIRST_PAGE_OFF   (>> BLOCK_SIZE (- PAGE_SHIFT PDESCR_SHIFT)))
(var FIRST_PDESCR_OFF (>> FIRST_PAGE_OFF (- PAGE_SHIFT PDESCR_SHIFT)))
(var END_PDESCR_OFF   FIRST_PAGE_OFF)

(define FIRST_PAGE   (block) `(+ @block @FIRST_PAGE_OFF))
(define FIRST_PDESCR (block) `(+ @block @FIRST_PDESCR_OFF))
(define END_PDESCR   (block) (FIRST_PAGE block))

(define IS_FIRST_PDESCR (pd) `(== (& @pd @BLOCK_MASK) @FIRST_PDESCR_OFF))
(define IS_END_PDESCR   (pd) `(== (& @pd @BLOCK_MASK) @END_PDESCR_OFF))

(var MAX_BLOCKS 4096) ; 4096 is enough for 32-bit machine
(define BLOCK2BIDX  (addr)  `(>> @addr @BLOCK_SHIFT))
(define BIDX2BLOCK  (idx)   `(<< @idx @BLOCK_SHIFT))
(define IS_POINTER_TO_HEAP  (addr)  `(!= @(blockmap->first (BLOCK2BIDX addr)) 0))

(define IS_CONSTANT (addr) `(|| (& @addr 1) (u<= @addr 8)))

(define BDESCR2BLOCK (bdescr) `(<< (- @bdescr block_map) @(- BLOCK_SHIFT BDESCR_SHIFT)))

(define blockmap[] (idx)    `(+ block_map (* @BDESCR_SIZE @idx)))
(define blockmap->next  (idx)       `([] block_map (* @BDESCR_WORD @idx)))
(define blockmap->first (idx)       `([] block_map (+ (* @BDESCR_WORD @idx) 1)))
(define blockmap->next=  (idx val)  `([]= block_map (* @BDESCR_WORD @idx) @val))
(define blockmap->first= (idx val)  `([]= block_map (+ (* @BDESCR_WORD @idx) 1) @val))

; object tag:
;              | 1bit | 20bit | 7bit |  4bit  |
; padding      |  --  | words |    0 | 0b0000 |
; pstruct      |  --  | words | type | 0b0001 | # See the note below.
; cons         |  --  |     3 |    0 | 0b0010 |
; sequence     |  --  | words | type | 0b0011 |
; struct       |  --  | words | #box | 0b0100 |
; variant      |  --  | words | #box | 0b0101 |
; bytecode     |  --  | words |    0 | 0b0110 |
; bigint       |  --  |     5 |    0 | 0b0111 |
; expr         |  --  | words |    0 | 0b1000 |
; continuation |  --  |     7 |    0 | 0b1001 |

; We use upper 2 bit of 7-bit field of 'pstruct' to represent exact size
; of objects as following figure.
;              | 1bit |  20bit |   2bit | 5bit |  4bit  |
; pstruct      |  --  | size/4 | size%4 | type | 0b0001 |

(define OBJECT_WORDS (addr)  `(& (>> ([] @addr 0) 11) @(- (<< 1 20) 1)))
(define OBJECT_TAG (addr)    `(& ([] @addr 0) @(- (<< 1 4) 1)))
(define OBJECT_COPYED (addr) `(< ([] @addr 0) 0))
(define OBJECT_SETCOPYED (addr) `([]= @addr 0 (| ([] @addr 0) @(<< 1 31))))
(define BOXED_FIELD_SIZE (addr) `(& (>> ([] @addr 0) 4) @(- (<< 1 7) 1)))
(define OBJECT_PLAIN_TAG (addr) `(& (>> ([] @addr 0) 4) @(- (<< 1 5) 1)))
(define OBJECT_PLAIN_BYTES (addr) `(& (>> ([] @addr 0) 9) @(- (<< 1 22) 1)))
(define SEQUENCE_TAG (addr) (BOXED_FIELD_SIZE addr))

(define HEADER (tag nboxed objsz) `(| (<< @objsz 11) (| (<< @nboxed 4) @tag)))
(define SET_HEADER (addr tag nboxed objsz) `([]= @addr 0 @(HEADER tag nboxed objsz)))

(define FORWARD_ADDR (obj) `([] @obj 1))
(define SET_FORWARD_ADDR (obj addr) `([]= @obj 1 @addr))

(var IN_GC `(!= current_gen next_gen))

(var vm-gc-code `(

(extern void* stack)
(extern int stack_size)
(extern void* gobject_area_base)
(extern int num_gobject)
(extern int wrtable_GC_ran)
(extern void* exstack)

; Stack for Shift/Reset delimited continuation
; frame structure:
;   word 0: stack top at reset
;   word 1: base pointer
;   word 2: size of evacuated stack
;   word 3: pointer to the next frame
(extern void* resetstack)

(byte[] @(* BDESCR_SIZE MAX_BLOCKS) block_map)
(int stack_base)    ; address of stack bottom
(int current_gen)   ; current generation ID
(int next_gen)      ; next generation ID (used during GC)
(int num_block)     ; number of allocated blocks
(void* next_addr 0)
(int[] @MAX_BLOCKS block_used)
(void* current_block)   ; bdescr of curret block
(void* page_queue_head) ; page queue for breadth first scanning
(void* page_queue_tail) ; page queue for breadth first scanning
(void* freepage)        ; pdescr of current free page
(void* freep)    ; pointer to free memory in current free page
(int free_words) ; size of free area in current page (in words)
(int num_allocated_pages 0) ; number of allocated pages
(void* continuation_list 0)
(int num_seq 0)

(void*[] @MAX_LARGE_OBJECTS large_objects)
(byte[]  @MAX_LARGE_OBJECTS large_objects_mark)
(int num_large_objects 0)

(void*[] @MAX_STATICS statics)
(int num_static)

(export stop_GC)
(int stop_GC @FALSE)

(export register_static)
(fun register_static (addr) (
    (if (>= num_static @MAX_STATICS) ((error "too many static objects.\n")))
    ([]= statics num_static addr)
    (incr num_static)
    ))

(fun mmap2 (addr size) (
    (void* ptr (syscall @SYS_MMAP2 addr size
        @(| PROT_READ PROT_WRITE PROT_EXEC) @(| MAP_ANONYMOUS MAP_PRIVATE) -1 0))
    (if (&& (<= -128 ptr) (< ptr 0))  ((error "mmap2 failed\n")))
    (return ptr)
    ))

(export munmap)
(fun munmap (addr size) (
    (syscall @SYS_MUNMAP addr size)
    ))

; `size` must be a multiple of BLOCK_SIZE
(export alloc_block)
(fun alloc_block (size) (
    (+= size @BLOCK_SIZE)
    (void* ptr (mmap2 0 size))
    (void* slop (& ptr @BLOCK_MASK))
    (if (< (munmap ptr (- @BLOCK_SIZE slop)) 0) ((error "munmap failed\n")))
    (if (&& (> slop 0) (< (munmap (- (+ ptr size) slop) slop) 0))
        ((error "munmap failed\n")))
    (= ptr (- (+ ptr @BLOCK_SIZE) slop))
    ([]= block_used (>> ptr @BLOCK_SHIFT) (>> size @BLOCK_SHIFT))
    (return ptr)
    ))


(fun alloc_new_block () (
    (void* addr)
    (if (> (+ num_block 1) @MAX_BLOCKS) ((error "too many blocks\n")))
    (if (== next_addr 0)
        ((= addr (alloc_block @BLOCK_SIZE)))
        (
            (= addr (mmap2 next_addr @BLOCK_SIZE))
            (if (!= (& addr @BLOCK_MASK) 0)
                (
                    (if (< (munmap addr @BLOCK_SIZE) 0) ((error "munmap failed\n")))
                    (= addr (alloc_block @BLOCK_SIZE))
                )
                (
                    ([]= block_used (/ addr @BLOCK_SIZE) 1)
                )
            )
        ))
    (= next_addr (+ addr @BLOCK_SIZE))
    (init_pdescrs addr)
    (void* blk @(blockmap[] (BLOCK2BIDX addr)))
    (if (== current_block 0) ((= current_block blk)))
    @(bdescr->first= blk addr)
    @(bdescr->next= blk (bdescr->next current_block))
    @(bdescr->next= current_block blk)
    (incr num_block)
    ))

(fun enqueue_page (pd) (
    (if page_queue_head
        (@(pdescr->next= page_queue_tail pd))
        ((= page_queue_head pd))
        )
    @(pdescr->next= pd 0)
    (= page_queue_tail pd)
    ))

(fun promote_page (addr) (
    (if (! @(IS_POINTER_TO_HEAP addr)) ((return)))
    (void* pd @(ADDR2PDESCR addr))
    (if (== @(pdescr->generation pd) current_gen) (
        (void* p pd)
        (void* end @(END_PDESCR (ADDR2BLOCK addr)))
        (+= num_allocated_pages 1)

        (+= p @PDESCR_SIZE)
        (while (&& (< p end) @(pdescr->joined p)) (
            @(pdescr->generation= p next_gen)
            (+= p @PDESCR_SIZE)
            (+= num_allocated_pages 1)
            ))
        (while @(pdescr->joined pd) (
            @(pdescr->generation= pd next_gen)
            (-= pd @PDESCR_SIZE)
            (+= num_allocated_pages 1)
            ))
        @(pdescr->generation= pd next_gen)
        (enqueue_page pd)
        ))
    ))

(fun scan_machine_stack () (
    (int stack_top)
    (void* p (address stack_top))
    (while (< p stack_base) (
        (promote_page ([] p 0))
        (+= p @WORD_SIZE)
        ))
    ))

(fun scan_vm_stack () (
    (void* p)
    (asm "movl %esi, " p)
    (void* end (+ stack stack_size))
    (while (< p end) (
        (promote_page ([] p 0))
        (+= p @WORD_SIZE)
        ))
    ))

(fun scan_exception_stack () (
    (void* p exstack)
    (while p (
        (promote_page ([] p 0))
        (promote_page ([] p 1))
        (promote_page ([] p 2))
        (promote_page ([] p 3))
        (= p ([] p 3))
        ))
    ))

(fun scan_reset_stack () (
    (void* p resetstack)
    (while p (
        (promote_page ([] p 0))
        (promote_page ([] p 1))
        (promote_page ([] p 3))
        (= p ([] p 3))
        ))
    ))

(fun scan_continuation_list () (
    (void* p continuation_list)
    (void* v 0)
    (int size 0)
    (promote_page p)
    (while p (
        (promote_page ([] p 0)) ; pc
        (= v ([] p 3))
        (= size ([] p 4))
        (for i 0 size (
            (promote_page ([] v i))
            ))
        (promote_page ([] p 5))
        (= p ([] p 5))
        ))
    ))

(fun update_continuation_list () (
    (= continuation_list (update_continuation_list_iter continuation_list))
    ))

(fun update_continuation_list_iter (p) (
    (if (! p) ((return 0)))
    (if (== @(pdescr->generation (ADDR2PDESCR p)) next_gen) (
        ([]= p 5 (update_continuation_list_iter ([] p 5)))
        (return p)
        ))
    (void* q (- p @WORD_SIZE))
    (if @(OBJECT_COPYED q) (
        (= p @(FORWARD_ADDR q))
        ([]= p 5 (update_continuation_list_iter ([] p 5)))
        (return p)
        ))
    (return (update_continuation_list_iter ([] p 5)))
    ))

(fun move_exception_stack () (
    (void* p exstack)
    (void* q 0)
    (while p (
        (= q (+ p @(* 3 WORD_SIZE)))
        (= p ([] p 3))
        (move_object q)
        ))
    (move_object (address exstack))
    ))

(fun move_reset_stack () (
    (void* p resetstack)
    (void* q 0)
    (while p (
        (= q (+ p @(* 3 WORD_SIZE)))
        (= p ([] p 3))
        (move_object q)
        ))
    (move_object (address resetstack))
    ))

(fun copy_object (dst src words) (
    (while (> words 0) (
        ([]= dst 0 ([] src 0))
        (+= dst @WORD_SIZE)
        (+= src @WORD_SIZE)
        (decr words)
        ))
    ))

(export move_object)
(fun move_object (objp) (
    (void* obj ([] objp 0))

    ; nil object
    (if @(IS_CONSTANT obj) ((return)))

    (if (! @(IS_POINTER_TO_HEAP obj)) ((return)))

    ; this object is already in next generation
    (if (== @(pdescr->generation (ADDR2PDESCR obj)) next_gen) ((return)))

    (-= obj @WORD_SIZE)

    ; this object is already copyed
    (if @(OBJECT_COPYED obj) (
        ([]= objp 0 @(FORWARD_ADDR obj))
        (return)
        ))

    (int words @(OBJECT_WORDS obj))
    (void* new_obj (allocate_object words))
    (copy_object new_obj obj words)

    (+= new_obj @WORD_SIZE)

    @(SET_FORWARD_ADDR obj new_obj)
    @(OBJECT_SETCOPYED obj)
    ([]= objp 0 new_obj)
    ))

(fun move_fields (head) (
    (void* obj (+ head @WORD_SIZE))
    (int tag @(OBJECT_TAG head))
    (if (<= tag @TAG_PSTRUCT) ((return)))
    (if (== tag @TAG_CONS) (
        (move_object obj) ; car
        (move_object (+ obj @WORD_SIZE)) ; cdr
        (return)
        ))
    (if (== tag @TAG_SEQUENCE) (
        (+= num_seq 1)
        (int len (- @(OBJECT_WORDS head) 1)) ; -1 for the header
        (while (> len 0) (
            (move_object obj)
            (+= obj @WORD_SIZE)
            (decr len)
            ))
        (return)
        ))
    (if (== tag @TAG_STRUCT) (
        (int len @(BOXED_FIELD_SIZE head))
        (while (> len 0) (
            (move_object obj)
            (+= obj @WORD_SIZE)
            (decr len)
            ))
        (return)
        ))
    (if (== tag @TAG_VARIANT) (
        (int p obj)
        (int len @(BOXED_FIELD_SIZE head))
        (+= obj @WORD_SIZE) ; skip variant tag
        (while (> len 0) (
            (move_object obj)
            (+= obj @WORD_SIZE)
            (decr len)
            ))
        (return)
        ))
    (if (== tag @TAG_BYTECODE) (
        (move_object (+ obj @WORD_SIZE)) ; addrs
        (void* code (+ obj @(* 3 WORD_SIZE)))
        (void* reloc ([] obj 1))
        (int n ([] obj 2))
        (for i 0 n (
            (int offs ([] reloc i))
            (move_object (+ code offs))
            ))
        (return)
        ))
    (if (== tag @TAG_BIGINT) (
        (move_object obj) ; array
        (return)
        ))
    (if (== tag @TAG_EXPR) (
        (int len (- @(OBJECT_WORDS head) 1)) ; -1 for the header
        (while (> len 0) (
            (move_object obj)
            (+= obj @WORD_SIZE)
            (decr len)
            ))
        (return)
        ))
    (if (== tag @TAG_CONT) (
        (move_object (+ obj @WORD_SIZE))
        (move_object (+ obj @(* 3 WORD_SIZE)))
        (return)
        ))
    (error "move_fields: not reachable")
    ))

(export prim_garbage_collect)
(fun prim_garbage_collect () (
    (garbage_collect)
    ))

(fun garbage_collect () (
    (if (|| @IN_GC stop_GC) (
        (alloc_new_block)
        (return)
        ))
    (insert_padding) ; fill residual area in current page
    (= next_gen @(ADVANCE_GENERATION current_gen))
    (= page_queue_head 0)
    (= page_queue_tail 0)
    (= num_allocated_pages 0)
    (= num_seq 0)

    ; promote all pages which are refered from machine stack and vm-stack
    ; NB: scanning of machin registers is not necessary because
    ;     %ebx (program counter) will be stored in vm-stack and
    ;     other registers are not callee-save registers.
    (scan_machine_stack)
    (scan_vm_stack)
    (scan_exception_stack)
    (scan_reset_stack)
    (scan_continuation_list)

    (move_exception_stack)
    (move_reset_stack)

    ; move registered objects
    (for i 0 num_static (
        (move_object ([] statics i))
        ))

    ; move global heap objects
    (void* o gobject_area_base)
    (int n num_gobject)
    (while (> n 0) (
        (move_object o)
        (+= o @WORD_SIZE)
        (decr n)
        ))

    ; sweep across promoted pages with breadth-first traversing and copy their consistents.
    (void* p 0)
    (while page_queue_head (
        (= p page_queue_head)
        (= p @(PDESCR2PAGE p))
        (move_fields p)
        (+= p (* @WORD_SIZE @(OBJECT_WORDS p)))
        (while (&& (& p @PAGE_MASK) (!= p freep)) (
            (move_fields p)
            (+= p (* @WORD_SIZE @(OBJECT_WORDS p)))
            ))
        (= page_queue_head @(pdescr->next page_queue_head))
        ))

    (insert_padding)

    (move_wrtable_entries)
    (while page_queue_head (
        (= p page_queue_head)
        (= p @(PDESCR2PAGE p))
        (move_fields p)
        (+= p (* @WORD_SIZE @(OBJECT_WORDS p)))
        (label retry_move_fields)
        (while (&& (& p @PAGE_MASK) (!= p freep)) (
            (move_fields p)
            (+= p (* @WORD_SIZE @(OBJECT_WORDS p)))
            ))
        (if (== p freep) (
            (if (move_wrtable_entries) ((goto retry_move_fields)))
            ))
        (= page_queue_head @(pdescr->next page_queue_head))
        ))

    (update_wrtable_list)
    (update_continuation_list)
    (insert_padding)
    (= current_gen next_gen) ; switch to next generation
    ))

(fun insert_padding () (
    (if (> free_words 0) (
        @(SET_HEADER freep TAG_PADDING 0 free_words)
        (= free_words 0)
        ))
    ))

(fun nextpage (pd) (
    (+= pd @PDESCR_SIZE)
    (if @(IS_END_PDESCR pd) (
        (= current_block @(bdescr->next current_block))
        (= pd @(FIRST_PDESCR (bdescr->first current_block)))
        ))
    (return pd)
    ))

(fun allocate_page (npages) (
    (void* firstpage 0)
    (if (> npages @PAGES_PER_BLOCK) (
        (error "allocate_page: try to allocate too many pages\n")
        ))

    (if (> num_allocated_pages (* @(>> PAGES_PER_BLOCK 1) num_block)) (
        (garbage_collect)
        ))

    (label retry)
    (int allpages (* @PAGES_PER_BLOCK num_block))
    (int free 0)
    (while allpages (
        (decr allpages)
        (if (&& (!= @(pdescr->generation freepage) current_gen)
                (!= @(pdescr->generation freepage) next_gen))
            (
                (if (== free 0) ((= firstpage freepage)))
                (incr free)
                (if (== free npages) (
                    (+= num_allocated_pages npages)
                    (= freep @(PDESCR2PAGE firstpage))
                    (= free_words (<< npages @PAGE_WORDS_SHIFT))
                    (= freepage (nextpage freepage))
                    @(pdescr->generation= firstpage next_gen)
                    @(pdescr->joined=0 firstpage)
                    (if @IN_GC ((enqueue_page firstpage)))
                    (decr npages)
                    (while npages (
                        (+= firstpage @PDESCR_SIZE)
                        @(pdescr->generation= firstpage next_gen)
                        @(pdescr->joined=1 firstpage)
                        (decr npages)
                        ))
                    (return)
                    ))
            )
            (
                (= free 0)
            )
            )
        (= freepage (nextpage freepage))
        (if @(IS_FIRST_PDESCR freepage) ((= free 0)))
        ))
    (garbage_collect)
    (goto retry)
    ))

(fun allocate_object (words) (
    (if (== words 1) (
        (error "Every object must be bigger than 2 words.\n")
        ))
    (int npage (= npage (>> (- (+ words @PAGE_WORDS) 1) @PAGE_WORDS_SHIFT)))
    (if (> npage @PAGES_PER_BLOCK) (
        ; XXX: Mark-sweep based GC.
        (void* p (mmap2 0 (* npage @PAGE_SIZE)))
        ([]= large_objects num_large_objects p)
        ([]= large_objects_mark num_large_objects 0)
        (incr num_large_objects)
        (return p)
        ))
    (while (> words free_words) (
        (insert_padding)
        (allocate_page npage)
        ))
    (void* obj freep)
    (if (<= words @PAGE_WORDS)
        ((-= free_words words))
        ((= free_words (- (* npage @PAGE_WORDS) words)))
        )
    (+= freep (* @WORD_SIZE words))
    (return obj)
    ))

(export prim_copy)
(fun prim_copy (obj) (
    (-= obj @WORD_SIZE)
    (int words @(OBJECT_WORDS obj))
    (void* new_obj (allocate_object words))
    (copy_object new_obj obj words)
    (+= new_obj @WORD_SIZE)
    (return new_obj)
    ))

(export allocate_cons)
(fun allocate_cons () (
    (void* ptr (allocate_object 3))
    @(SET_HEADER ptr TAG_CONS 0 3)
    (return (+ ptr @WORD_SIZE))
    ))

(export cons)
(fun cons (a b) (
    (void* obj (allocate_cons))
    ([]= obj 0 a)
    ([]= obj 1 b)
    (return obj)
    ))

(export allocate_pstruct)
(fun allocate_pstruct (type bytes) (
    (int words (/ (+ bytes 3) 4))
    (if (== words 0) ((incr words)))
    (incr words) ; for header
    (void* ptr (allocate_object words))
    (= type (| (<< (% bytes 4) 5) type)) ; See the note about pstruct above.
    @(SET_HEADER ptr TAG_PSTRUCT type words)
    (return (+ ptr @WORD_SIZE))
    ))

(export allocate_struct)
(fun allocate_struct (nelem nboxed) (
    (int words (+ nelem 1))
    (void* ptr (allocate_object words))
    @(SET_HEADER ptr TAG_STRUCT nboxed words)
    (return (+ ptr @WORD_SIZE))
    ))

; # of elements
(export struct_size)
(fun struct_size (t) (
    (-= t @WORD_SIZE)
    (return (- @(OBJECT_WORDS t) 1))
    ))

(export allocate_struct_with_values)
(fun allocate_struct_with_values (nelem nboxed values) (
    (void* ptr (allocate_struct nelem nboxed))
    (for i 0 nelem (
        ([]= ptr i ([] values i))
        ))
    (return ptr)
    ))

(export prim_allocate_variant)
(fun prim_allocate_variant (tag nelem nboxed) (
    (int words (+ nelem 2))
    (void* ptr (allocate_object words))
    @(SET_HEADER ptr TAG_VARIANT nboxed words)
    (+= ptr @WORD_SIZE)
    ([]= ptr 0 tag)
    (return ptr)
    ))

(export prim_variant_size)
(fun prim_variant_size (v) (
    (-= v @WORD_SIZE)
    (return (- @(OBJECT_WORDS v) 1))
    ))

(export allocate_variant_with_values)
(fun allocate_variant_with_values (tag nelem nboxed values) (
    (void* ptr (prim_allocate_variant tag nelem nboxed))
    (for i 0 nelem (
        ([]= ptr (+ i 1) ([] values i))
        ))
    (return ptr)
    ))


(export is_alive)
(fun is_alive (obj) (
    (if @(IS_CONSTANT obj) ((return @TRUE)))
    (if (! @(IS_POINTER_TO_HEAP obj)) ((return @TRUE)))
    (if (== @(pdescr->generation (ADDR2PDESCR obj)) next_gen)
        ((return @TRUE)))
    (-= obj @WORD_SIZE)
    (if @(OBJECT_COPYED obj) (
        (return @TRUE)
        ))
    (return @FALSE)
    ))

(export require_move)
(fun require_move (obj) (
    (if @(IS_CONSTANT obj) ((return @FALSE)))
    (if (! @(IS_POINTER_TO_HEAP obj)) ((return @FALSE)))
    (if (== @(pdescr->generation (ADDR2PDESCR obj)) next_gen)
        ((return @FALSE)))
    (return @TRUE)
    ))

; array of integers
(export prim_allocate_iarray)
(fun prim_allocate_iarray (len) (
    (void* p (allocate_pstruct @PLAIN_OTHER (* 4 len)))
    (memset p 0 (* 4 len))
    (return p)
    ))

; array of characters
(export prim_allocate_carray)
(fun prim_allocate_carray (bytes) (
    (void* p (allocate_pstruct @PLAIN_OTHER bytes))
    (memset p 0 bytes)
    (return p)
    ))

; sequence of boxed objects
(export allocate_sequence)
(fun allocate_sequence (type nelem) (
    (if (== nelem 0) ((incr nelem)))
    (int size (+ nelem 1))
    (void* ptr (allocate_object size))
    (memset ptr 0 (* @WORD_SIZE size))
    @(SET_HEADER ptr TAG_SEQUENCE type size)
    (+= ptr @WORD_SIZE)
    (return ptr)
    ))

(export prim_allocate_tuple)
(fun prim_allocate_tuple (nelem) (
    (return (allocate_sequence @SEQ_TUPLE nelem))
    ))

(export prim_seq_size)
(fun prim_seq_size (ary) (
    (-= ary @WORD_SIZE)
    (return (- @(OBJECT_WORDS ary) 1)) ; -1 for header
    ))

(export prim_seq_clear)
(fun prim_seq_clear (ary) (
    (-= ary @WORD_SIZE)
    (int n (- @(OBJECT_WORDS ary) 1))
    (memset (+ ary @WORD_SIZE) 0 (* n @WORD_SIZE))
    (return ary)
    ))

(export prim_allocate_array)
(fun prim_allocate_array (nelem) (
    (return (allocate_sequence @SEQ_ARRAY nelem))
    ))

(export prim_allocate_expr)
(fun prim_allocate_expr (nelem) (
    (int size (+ nelem 2)) ; +2 for header and head of the expr
    (void* ptr (allocate_object size))
    @(SET_HEADER ptr TAG_EXPR 0 size)
    (+= ptr @WORD_SIZE)
    (return ptr)
    ))

(export prim_expr_size)
(fun prim_expr_size (expr) (
    (-= expr @WORD_SIZE)
    (return (- @(OBJECT_WORDS expr) 2))
    ))

; bytecode
(export prim_make_bytecode)
(fun prim_make_bytecode (code len addrs objs nobj) (
    (int size (+ 4 (/ (+ len @(- WORD_SIZE 1)) @WORD_SIZE)))
    (void* ptr (allocate_object size))
    @(SET_HEADER ptr TAG_BYTECODE 0 size)
    (+= ptr @WORD_SIZE)
    (for i 0 nobj (
        (int addr ([] addrs i))
        ([]= (+ code addr) 0 ([] objs i))
        ))
    ([]= ptr 0 len)
    ([]= ptr 1 addrs)
    ([]= ptr 2 nobj)
    (prim_memcpy (+ ptr @(* 3 WORD_SIZE)) code len)
    (return ptr)
    ))

(export prim_bytecode_ptr)
(fun prim_bytecode_ptr (obj) (
    (return (+ obj @(* 3 WORD_SIZE)))
    ))

(export prim_bytecode_size)
(fun prim_bytecode_size (obj) (
    (return ([] obj 0))
    ))

(export prim_bytecode_addrs)
(fun prim_bytecode_addrs (obj) (
    (return ([] obj 1))
    ))

(export prim_bytecode_nobj)
(fun prim_bytecode_nobj (obj) (
    (return ([] obj 2))
    ))

(fun print_resetstack () (
    (debug "==== reset stack ====\n")
    (void* p resetstack)
    (while p (
        (debug "> frame\n")
        (debug "stack pointer:   ")
        (debugx ([] p 0))
        (debug "base pointer:    ")
        (debugx ([] p 1))
        (debug "program counter: ")
        (debugx ([] p 2))
        (= p ([] p 3))
        ))
    ))

; shift-reset base partial continuation
(export prim_make_continuation)
(fun prim_make_continuation (pc base low high) (
    ;(print_resetstack)
    (-= high @(* 6 WORD_SIZE))  ; remove unnecessary stack words
    ;(debug "prim_make_continuation\n")
    ;(debug "pc  =") (debugx pc)
    ;(debug "base=") (debugx base)
    ;(debug "low =") (debugx low)
    ;(debug "high=") (debugx high)
    ;(debug "size=") (debugi (/ (- high low) @WORD_SIZE))
    (int size (- high low))
    (void* stack (prim_allocate_iarray size))
    (prim_memcpy stack low size)
    ;(debug "--stack--\n")
    ;(for i 0 (/ size @WORD_SIZE) (
    ;    (debugx ([] stack i))
    ;    ))
    ;(debug "---------\n")
    (void* ptr (allocate_object 7))
    @(SET_HEADER ptr TAG_CONT 0 7)
    (+= ptr @WORD_SIZE)
    ([]= ptr 0 pc)
    ([]= ptr 1 0)   ; cache
    ([]= ptr 2 (- base low)) ; offset of base ptr
    ([]= ptr 3 stack)
    ([]= ptr 4 size)
    ([]= ptr 5 continuation_list)
    (= continuation_list ptr)
    (return ptr)
    ))

; multiprecision integer
(export prim_allocate_bint)
(fun prim_allocate_bint (len) (
    (void* ary (prim_allocate_iarray len))
    (void* ptr (allocate_object 5))
    @(SET_HEADER ptr TAG_BIGINT 0 5)
    (+= ptr @WORD_SIZE)
    ([]= ptr 0 ary)
    ([]= ptr 1 1)   ; number of digits
    ([]= ptr 2 len) ; capacity
    ([]= ptr 3 0)   ; sign
    (return ptr)
    ))

(export prim_resize_bint)
(fun prim_resize_bint (ptr len) (
    (void* new (prim_allocate_iarray len))
    (prim_memcpy new ([] ptr 0) (* ([] ptr 1) @WORD_SIZE))
    ([]= ptr 0 new)
    ([]= ptr 2 len)
    (return ptr)
    ))

(export prim_copy_bint)
(fun prim_copy_bint (ptr) (
    (int len ([] ptr 2))
    (void* new (prim_allocate_bint len))
    (prim_memcpy ([] new 0) ([] ptr 0) (* len @WORD_SIZE))
    ([]= new 1 ([] ptr 1))
    ([]= new 3 ([] ptr 3))
    (return new)
    ))

(export prim_clear_bint)
(fun prim_clear_bint (ptr) (
    (int len ([] ptr 2))
    (memset ([] ptr 0) 0 (* len @WORD_SIZE))
    ([]= ptr 1 1)
    ([]= ptr 3 0)
    (return ptr)
    ))

(export prim_allocate_float)
(fun prim_allocate_float () (
    (void* ptr (allocate_pstruct @PLAIN_FLOAT 64))
    ([]= ptr 0 0)
    ([]= ptr 1 0)
    (return ptr)
    ))

(export prim_copy_float)
(fun prim_copy_float (f) (
    (void* ptr (allocate_pstruct @PLAIN_FLOAT 64))
    ([]= ptr 0 ([] f 0))
    ([]= ptr 1 ([] f 1))
    (return ptr)
    ))

(export prim_is_special)
(fun prim_is_special (obj) (
    (if (&& obj (&& (! (& obj 1)) (u<= obj @SPECIAL_MAX)))
        ((return @TRUE))
        ((return @FALSE))
        )
    ))

(export prim_get_tag)
(fun prim_get_tag (obj) (
    (-= obj @WORD_SIZE)
    (return @(OBJECT_TAG obj))
    ))

(export prim_get_pstruct_tag)
(fun prim_get_pstruct_tag (obj) (
    (-= obj @WORD_SIZE)
    (return @(OBJECT_PLAIN_TAG obj))
    ))

(export prim_get_pstruct_size)
(fun prim_get_pstruct_size (obj) (
    (-= obj @WORD_SIZE)
    (int size @(OBJECT_PLAIN_BYTES obj))
    (if (% size 4)
        ((return (- size @(* 2 WORD_SIZE))))
        ((return (- size @WORD_SIZE)))
        )
    ))

(export prim_get_sequence_tag)
(fun prim_get_sequence_tag (obj) (
    (-= obj @WORD_SIZE)
    (return @(SEQUENCE_TAG obj))
    ))

(export prim_gc_allocated)
(fun prim_gc_allocated () (
    (return (* num_block @BLOCK_SIZE))
    ))

(export prim_gc_used)
(fun prim_gc_used () (
    (return (- (* num_allocated_pages @PAGE_SIZE) (* free_words @WORD_SIZE)))
    ))

(fun init_pdescrs (block_addr) (
    (void* page @(FIRST_PAGE block_addr))
    (void* pdf  @(FIRST_PDESCR block_addr))
    (void* pde  @(END_PDESCR block_addr))
    (while (< pdf pde) (
        @(pdescr->generation= pdf 0)
        @(pdescr->next=       pdf 0)
        (+= pdf @PDESCR_SIZE)
        (+= page @PAGE_SIZE)
        ))
    ))

(export init_gc)
(fun init_gc (stack_base_) (
    (int x)
    (if (! stack_base_) ((= stack_base_ (address x))))
    (= stack_base stack_base_)
    (memset block_map 0 @(* BDESCR_SIZE MAX_BLOCKS))
    (= current_gen 1)
    (= next_gen 1)
    (= num_block 0)
    (for i 0 @DEFAULT_NUM_BLOCK (
        (alloc_new_block)
        ))
    (= page_queue_head 0)
    (= page_queue_tail 0)
    (= freepage @(FIRST_PDESCR (bdescr->first current_block)))
    ))

(export finish_gc)
(fun finish_gc () (
    (for i 0 @MAX_BLOCKS (
        (if ([] block_used i) (
            (munmap 0 @BLOCK_SIZE)
            ))
        ))
    ))

))

(vtable_push)
(compile vm-gc-code)
(vtable_pop)
