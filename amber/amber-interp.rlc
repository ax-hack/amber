;
; rowl - 1st generation
; Copyright (C) 2010 nineties
;
; $Id: amber-interp.rlc 2015-08-08 14:22:07 nineties $
;

(import "rlvm-compile")
(import "amber-types")

(compile `object `(

(import "amber-util")
(import "amber-node")
(import "amber-error")
(import "amber-object")
(import "amber-symtable")
(import "amber-assemble")
(import "amber-compile")
(import "amber-packrat")
(import "amber-pprint")
(import "amber-tuple")
(import "amber-array")


(export var amber null)
(export var global null)
(export var variables null)

(var current_loc null)
(var module_stack null)

(export fun set_loc (loc) (
    (= current_loc loc)
    (set_var global (to_sym "LOCATION") loc)
    ))

(fun version_string () (
    (return (strcat (strcat
        (itos10 @VERSION_MAJOR) ".")
        (itos10 @VERSION_MINOR)))
    ))

(export fun eval_main (argc argv) (
    (var ret 0)
    (try
        (= ret (eval_main_ argc argv))
        (catch e (do
            (= global amber)
            (pprint stderr current_loc)
            (output_string stderr " Error: ")
            (pprint stderr e)
            (output_string stderr "\n")
            (return 1)
        )))
    (return ret)
    ))

(extern fun str_split)
(fun setup_load_paths (cwd) (
    (var load_path 0)
    (= load_path (cons cwd load_path))
    (var str (getenv "LD_LIBRARY_PATH"))
    (if str (do
        (var list (str_split str (string ":")))
        (while list (do
            (var dir (realpath (car list)))
            (if (! dir) break) ; this directory doesn't exists
            (= load_path (cons (strcat dir "/amber") load_path))
            (= list (cdr list))
            ))
        ))
    (= load_path (cons (string "/usr/lib/amber") load_path))
    (= load_path (cons (string "/lib/amber") load_path))
    (return load_path)
    ))

(fun construct_env () (
    (var env (ary_new))
    (var ptr (environ))
    (var i 0)
    (while (array_get string ptr i) (do
        (var str (array_get string ptr i)) 
        (var pos 0)
        (while (!= (array_get char str pos) '=') (incr pos))
        (var name  (strndup str pos))
        (var value (strdup (+ str (+ pos 1))))
        (ary_push env (tuple2 name value))
        (+= i 1)
        ))
    (return env)
    ))

(fun eval_main_ (argc argv) (

    (= current_loc no_loc)

    ; Local variable table
    (= variables (make_symtable 10))

    ; enable set_slot and get_slot
    (setup_object_pre)

    ; Global Module
    (= amber (create_module @C_NIL Amber))
    (remove_parent (get_slot amber Variables))
    (set_var amber Amber amber)
    (= global amber)

    (remove_parent @C_NIL)

    ; Collection of primitive functions
    (var prim (make_node0 VarTable))
    (set_slot prim (to_sym "_owner_") global)
    (set_var global Prim prim)

    ; Setup built-in objects and functions.
    (setup_argv argc argv)
    (setup_builtin_compilers prim)
    (init_lib prim)
    (init_parser_funcs prim) 

    ; Boot Amber
    (set_loc no_loc)
    (var cwd (getcwd))
    (if (! cwd) (throw (os_error (string "Failed to get current working directory"))))
    (set_var amber (to_sym "INVOKE_PATH") cwd)
    (var load_path (setup_load_paths cwd))
    (set_var amber (to_sym "LOAD_PATH") load_path)
    (set_var amber (to_sym "ALREADY_LOADED") 0)
    (set_var amber (to_sym "VERSION") (version_string))
    (set_var amber (to_sym "ENV") (construct_env))
    (setup_minimal_interpreter prim)
    (boot)
    (eval_exit @C_NIL)
    (return 0)
    ))

(fun evalfull (expr) (
    (var f (lookup_func_nocheck global (to_sym "before_eval")))
    (if f (= expr (runcode_with_self global f expr)))
    (var v (runcode_with_self global (lookup_func global Eval) expr))
    (var g (lookup_func_nocheck global (to_sym "after_eval")))
    (if g (= v (runcode_with_self global g v)))
    (return v)
    ))

(extern fun fullform)
(fun interpret (p) (
    (while 1 (do
        (set_loc (get_loc p))
        (parse_toplevel p)
        (if (! (parse_success p)) (do
            (if (end_of_file p) break)
            (throw (syntax_error (parser_error p)))
            ))
        (evalfull (parsed_token p))
        ))
    ))

(fun interpret_preparsed (p) (
    (while 1 (do
        (set_loc (get_loc p))
        (parse_toplevel_preparse p)
        (if (! (parse_success p)) (do
            (if (end_of_file p) break)
            (throw (syntax_error (parser_error p)))
            ))
        (evalfull (parsed_token p))
        ))
    ))

(fun eval (expr) (
    (return (runcode_with_self global (lookup_func global Eval) expr))
    ))

(fun builtin_eval (expr) (
    (var hd (node_head expr))
    (if (== hd Block) (do
        (var v @C_NIL)
        (enter_block)
        (try
            (for i 0 (node_size expr)
                (= v (eval (node_arg expr i)))
                )
        (catch e (do
            (exit_module)
            (throw e)
            )))
        (exit_module)
        (return v)
        )
    (if (== hd Seq) (do
        (var v @C_NIL)
        (for i 0 (node_size expr)
            (= v (eval (node_arg expr i)))
            )
        (return v)
        )))
    (return (runcode_with_self global (compile_main expr)))
    ))

(var atexit_list null)

(fun eval_exit (expr) (
    (= atexit_list (list_reverse atexit_list))
    (while atexit_list (do
        (runcode_with_self global (get_bytecode (car atexit_list)))
        (= atexit_list (cdr atexit_list))
        ))
    (exit 0)
    ))

(fun exit_ (status) (
    (if (! (&& (& status 1) (> status 0)))
        (throw (invalid_argument (string "invalid exit status code") status))
        )
    (= atexit_list (list_reverse atexit_list))
    (while atexit_list (do
        (runcode (get_bytecode (car atexit_list)))
        (= atexit_list (cdr atexit_list))
        ))
    (exit (unbox status))
    ))

(fun exit0_ () (
    (exit_ (box 0))
    ))

(export fun at_exit (fun) (
    (= atexit_list (cons fun atexit_list))
    (return @C_NIL)
    ))

(fun setup_argv (argc argv) (
    (var ARGV (ary_new))
    (set_var amber (to_sym "ARGV") ARGV)
    (if (== argc 0) return)
    (for i 0 argc (do
        (ary_push ARGV (string (array_get string argv i)))
        ))
    ))

(fun load_file (path) (
    (var dirs (get_var_list amber (to_sym "LOAD_PATH")))
    (var loaded (get_var_list amber (to_sym "ALREADY_LOADED")))
    (while dirs (do
        (var dir (car dirs))
        (if (!= (node_type dir) @StringE) 
            (throw (type_error (string "invalid path") dir))
            )
        (var fullpath (strcat (strcat dir "/") path))
        (if (file_exists fullpath) (do
            ; multiple load check.
            (var rpath (realpath fullpath))
            (if (! rpath)
                (throw (os_error1 (string "Failed to get absolute path") fullpath)))

            (var loaded_ loaded) 
            (while loaded_ (do
                (var path (car loaded_))
                (check_type path @StringE)
                (if (streq path rpath) (return @C_FALSE))
                (= loaded_ (cdr loaded_))
                ))

            (set_var amber (to_sym "ALREADY_LOADED") (cons rpath loaded))

            (var fd (open "."))
            (if (< fd 0) (throw (io_error (string "Can not open '.'"))))

            ; Check whether there is pre-parsed lib.
            (var pcpath (strcat rpath "c"))
            (var pre @FALSE)
            (if (file_exists pcpath) (do
                (= rpath pcpath)
                (= pre @TRUE)
                ))
            (var ichan (open_in rpath @FALSE))
            (if (! ichan) (throw (io_error1 (string "Open failed") fullpath)))
            (var dir (get_directory rpath))
            (if (< (chdir dir) 0)
                (throw (os_error (string
                    (strcat "Failed to change directory to " dir)))))

            (try (do
                (var p (make_parser path ichan))
                (set_slot p Syntax (get_var amber Syntax))
                (set_loc (get_loc p))
                (if pre
                    (interpret_preparsed p)
                    (interpret p)
                    )
                )
            (catch e (do
                (fchdir fd)
                (close fd)
                (close_in ichan)
                (throw e)
                )))

            (if (< (fchdir fd) 0)
                (throw (os_error (string "Failed to change directory to '.'"))))
            (if (< (close fd) 0)
                (throw (io_error (string "Failed to close '.'")))
                )
            (close_in ichan)
            (return @C_TRUE)
            ))
            (= dirs (cdr dirs))
        ))
    (throw (not_found (string path)))
    ))

(fun exec_file (path) (
    (var fd (open "."))
    (if (< fd 0) (throw (io_error (string "Can not open '.'"))))

    (var ichan (open_in path @FALSE))
    (if (! ichan) (throw (io_error1 (string "Open failed") path)))
    (var dir (get_directory path))
    (if (< (chdir dir) 0)
        (throw (os_error (string
            (strcat "Failed to change directory to " dir)))))

    (var p (make_parser path ichan))
    (set_slot p Syntax (get_var amber Syntax))
    (set_loc (get_loc p))
    (interpret p)
    (if (< (fchdir fd) 0)
        (throw (os_error (string "Failed to change directory to '.'"))))
    (if (< (close fd) 0)
        (throw (io_error (string "Failed to close '.'")))
        )
    (close_in ichan)
    (return @C_TRUE)
    ))

(fun loadable (path) (
    (var dirs (get_var_list amber (to_sym "LOAD_PATH")))
    (while dirs (do
        (var dir (car dirs))
        (if (!= (node_type dir) @StringE)
            (throw (type_error (string "invalid path") dir))
            )
        (var fullpath (strcat (strcat dir "/") path))
        (if (file_exists fullpath) (return @C_TRUE))
        (= dirs (cdr dirs))
        ))
    (return @C_FALSE)
    ))

(export fun create_module (parent sym) (
    (if (&& (!= (node_head parent) Module) (!= parent @C_NIL))
        (throw (invalid_argument (string "not a module") sym))
        )
    (var mod (make_node1 Module sym))
    (var vtbl (make_node0 VarTable))
    (if (!= parent @C_NIL)
        (set_slot vtbl Parent (get_slot parent Variables))
        )
    (set_slot mod Parent parent)
    (set_slot mod Variables vtbl)
    (set_slot vtbl (to_sym "_owner_") mod)

    ; This module is visible inside the module itself and the parent.
    (set_var mod sym mod)
    (if (!= parent @C_NIL)
        (set_var parent sym mod)
        )
    (return mod)
    ))

(fun enter_module (sym rec) (
    (if (!= (symtable_depth variables) 0)
        (throw (logic_error (string "enter_module() can be called only in top-scope"))))
    (var mod @C_NIL)
    (var parent global)
    (while @TRUE (do
        (var tbl (get_slot parent Variables))
        (= mod (get_slot_norec_nocheck tbl sym))
        (if (== (node_head mod) Module)
            break
            )
        (= parent (get_parent parent))
        (if (!= (node_head parent) Module) (do
            (= parent amber)
            break
            ))
        ))
    (if (&& (== rec @C_FALSE) (!= parent global)) (do
        (= mod @C_NIL)
        (= parent global)
        ))
    (if (|| (== mod @C_NIL) (!= (node_head mod) Module))
        (= mod (create_module parent sym))
        )
    (= module_stack (cons global module_stack))
    (= global mod)
    (return mod)
    ))

(fun enter_block () (
    (if (!= (symtable_depth variables) 0)
        (throw (logic_error (string "enter_module() can be called only in top-scope"))))
    (var mod (create_module global (to_unique_sym "block")))
    (= module_stack (cons global module_stack))
    (= global mod)
    (return mod)
    ))

(fun exit_module () (
    (if (! module_stack)
        (throw (logic_error (string "Can not exit from global-module"))))
    (var mod (car module_stack))
    (= global mod)
    (= module_stack (cdr module_stack))
    (return mod)
    ))

(fun boot () (
    (var asm_boot (make_assembler))
    (put_push asm_boot (string "boot.ab"))
    (put_imm_int32 asm_boot load_file)
    (put_acall asm_boot 0)
    (put_ireturn asm_boot)

    (var asm_reset (make_assembler))
    
    (put_push asm_reset (get_code asm_boot))
    (put_rcall asm_reset)
    (put_ireturn asm_reset)
    (runcode (get_code asm_reset))
    ))

(export fun load_global (sym) (
    (return (get_slot_nocheck (get_slot amber Variables) sym))
    ))

(export fun set_var (mod sym val) (
    (return (set_slot (get_slot mod Variables) sym val))
    ))

(export fun get_var (mod sym) (
    (return (get_slot (get_slot mod Variables) sym))
    ))

(export fun get_var_list (mod sym) (
    (var v (get_var mod sym))
    (if (!= (node_type v) @ListE)
        (throw (type_error2 (string "must be a list") sym v))
        )
    (return v)
    ))

(export fun get_var_nocheck (mod sym) (
    (return (get_slot_nocheck (get_slot mod Variables) sym))
    ))

(export fun get_var_norec_nocheck (mod sym) (
    (return (get_slot_norec_nocheck (get_slot mod Variables) sym))
    ))

(fun define_variable (sym val) (
    (return (set_var global sym val))
    ))

(fun gettimeofday_ () (
    (return (gettimeofday))
    ))

(fun timeval_sub_ (t1 t2) (
    (var t (timeval_sub t1 t2))
    (return (tuple2 (box (field_get t 0)) (box (field_get t 1))))
    ))

(fun setup_minimal_interpreter (prim) (
    ; evaluator
    (add_function1 prim Eval DontCare builtin_eval 0)
    (add_function1 prim (to_sym "evalfull") DontCare evalfull 0)

    (add_function1 prim (to_sym "exit") intT exit_ 0)
    (add_function0 prim (to_sym "exit") exit0_ 0)
    (add_function1 prim (to_sym "atexit") funT at_exit 0)
    (add_function1 prim (to_sym "load") stringT load_file 0)
    (add_function1 prim (to_sym "execfile") stringT exec_file 0)
    (add_function1 prim (to_sym "loadable?") stringT loadable 0)
    (add_function2 prim (to_sym "create_module") DontCare symT create_module 0)
    (add_function2 prim (to_sym "enter_module") symT boolT enter_module 0)
    (add_function0 prim (to_sym "exit_module") exit_module 0)
    (add_function2 prim (to_sym "define_variable") symT DontCare define_variable 0)
    ;(add_function0 prim (to_sym "gettimeofday") gettimeofday_ 0)
    ;(add_function2 prim (to_sym "timeval_sub") DontCare DontCare timeval_sub_ 0)
    (add_function1 prim (to_sym "debugpf") DontCare debugpf 0)

    ; important functions
    (define_variable (to_sym "compile")  (get_slot prim (to_sym "compile")))
    (define_variable Eval (get_slot prim Eval))
    (define_variable (to_sym "evalfull") (get_slot prim (to_sym "evalfull")))
    (define_variable (to_sym "PROMPT") (string "amber"))
    ; parser
    (var syntax (create_module amber Syntax))
    (set_var amber Syntax syntax)
    
    (set_var syntax (to_sym "any") (get_slot prim (to_sym "parse_any")))
    (set_var syntax (to_sym "spaces") (get_slot prim (to_sym "parse_spaces")))
    (set_var syntax (to_sym "comment") (get_slot prim (to_sym "parse_comment")))
    (set_var syntax (to_sym "decimal") (get_slot prim (to_sym "parse_decimal")))
    (set_var syntax (to_sym "binary") (get_slot prim (to_sym "parse_binary")))
    (set_var syntax (to_sym "octal") (get_slot prim (to_sym "parse_octal")))
    (set_var syntax (to_sym "hex") (get_slot prim (to_sym "parse_hex")))
    (set_var syntax (to_sym "integer") (get_slot prim (to_sym "parse_integer")))
    (set_var syntax (to_sym "float") (get_slot prim (to_sym "parse_float")))
    (set_var syntax (to_sym "string") (get_slot prim (to_sym "parse_string")))
    (set_var syntax (to_sym "symbol") (get_slot prim (to_sym "parse_symbol")))
    (set_var syntax (to_sym "any_symbol") (get_slot prim (to_sym "parse_any_symbol")))
    (set_var syntax (to_sym "identifier") (get_slot prim (to_sym "parse_identifier")))
    (set_var syntax (to_sym "atom") (get_slot prim (to_sym "parse_atom")))
    (set_var syntax (to_sym "fullform") (get_slot prim (to_sym "parse_fullform")))
    (set_var syntax (to_sym "fullform_preparse") (get_slot prim (to_sym "parse_fullform_preparse")))
    (set_var syntax (to_sym "expr") (get_slot prim (to_sym "parse_expr")))
    (set_var syntax (to_sym "stmt") (get_slot prim (to_sym "parse_stmt")))
    (set_var syntax (to_sym "toplevel_stmt") (get_slot prim (to_sym "parse_toplevel_stmt")))

    ))

(extern fun setup_pprint)
(extern fun setup_base)
(extern fun setup_function)
(extern fun setup_symbol)
(extern fun setup_encoding)
(extern fun setup_numeric)
(extern fun setup_bigint)
(extern fun setup_float)
(extern fun setup_random)
(extern fun setup_math)
(extern fun setup_string)
(extern fun setup_io)
(extern fun setup_list)
(extern fun setup_tuple)
(extern fun setup_array)
(extern fun setup_table)
(extern fun setup_sys)
(extern fun setup_gc)

(fun init_lib (mod) (
    (setup_base mod)
    (setup_function mod)
    (setup_pprint mod)
    (setup_object mod)
    (setup_encoding mod)
    (setup_symbol mod)
    (setup_math mod)
    (setup_bigint mod)
    (setup_string mod)
    (setup_float mod)
    (setup_random mod)
    (setup_io mod)
    (setup_list mod)
    (setup_tuple mod)
    (setup_array mod)
    (setup_table mod)
    (setup_sys mod)
    (setup_gc mod)
    ))

    ))
